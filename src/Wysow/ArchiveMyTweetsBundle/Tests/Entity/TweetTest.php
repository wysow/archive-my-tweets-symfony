<?php

namespace Wysow\ArchiveMyTweetsBundle\Tests\Entity;

use Wysow\ArchiveMyTweetsBundle\Entity\Tweet;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-10 at 12:13:22.
 *
 * @group archive-my-tweets
 */
class TweetTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Tweet
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Tweet;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setId
     */
    public function testSetId()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setId(1));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getId
     */
    public function testGetId()
    {
        $this->object->setId(1);

        $this->assertEquals(1, $this->object->getId());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setUserId
     */
    public function testSetUserId()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setUserId(1));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getUserId
     */
    public function testGetUserId()
    {
        $this->object->setUserId(1);

        $this->assertEquals(1, $this->object->getUserId());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setUserScreenName
     */
    public function testSetUserScreenName()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setUserScreenName('test'));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getUserScreenName
     * @todo   Implement testGetUserScreenName().
     */
    public function testGetUserScreenName()
    {
        $this->object->setUserScreenName('test');

        $this->assertEquals('test', $this->object->getUserScreenName());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setCreatedAt
     */
    public function testSetCreatedAt()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setCreatedAt(new \DateTime('@'.strtotime('now'))));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getCreatedAt
     */
    public function testGetCreatedAt()
    {
        $time = new \DateTime('@'.strtotime('now'));
        $this->object->setCreatedAt($time);

        $this->assertEquals($time, $this->object->getCreatedAt());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setTweet
     */
    public function testSetTweet()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setTweet('test'));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getTweet
     */
    public function testGetTweet()
    {
        $this->object->setTweet('test');

        $this->assertEquals('test', $this->object->getTweet());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setSource
     */
    public function testSetSource()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setSource('<a href="http://www.viadeo.com" rel="nofollow">Viadeo</a>'));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getSource
     */
    public function testGetSource()
    {
        $this->object->setSource('<a href="http://www.viadeo.com" rel="nofollow">Viadeo</a>');

        $this->assertEquals('<a href="http://www.viadeo.com" target="_blank" rel="nofollow">Viadeo</a>', $this->object->getSource());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setTruncated
     */
    public function testSetTruncated()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setTruncated(true));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getTruncated
     */
    public function testGetTruncated()
    {
        $this->object->setTruncated(true);

        $this->assertTrue($this->object->getTruncated());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setFavorited
     */
    public function testSetFavorited()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setFavorited(true));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getFavorited
     */
    public function testGetFavorited()
    {
        $this->object->setFavorited(true);

        $this->assertTrue($this->object->getFavorited());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setInReplyToStatusId
     */
    public function testSetInReplyToStatusId()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setInReplyToStatusId(123456789));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getInReplyToStatusId
     */
    public function testGetInReplyToStatusId()
    {
        $this->object->setInReplyToStatusId(123456789);

        $this->assertEquals(123456789, $this->object->getInReplyToStatusId());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setInReplyToUserId
     */
    public function testSetInReplyToUserId()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setInReplyToUserId(123456789));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getInReplyToUserId
     */
    public function testGetInReplyToUserId()
    {
        $this->object->setInReplyToUserId(123456789);

        $this->assertEquals(123456789, $this->object->getInReplyToUserId());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::setInReplyToScreenName
     */
    public function testSetInReplyToScreenName()
    {
        $this->assertInstanceOf('Wysow\ArchiveMyTweetsBundle\Entity\Tweet', $this->object->setInReplyToScreenName('test'));
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getInReplyToScreenName
     */
    public function testGetInReplyToScreenName()
    {
        $this->object->setInReplyToScreenName('test');

        $this->assertEquals('test', $this->object->getInReplyToScreenName());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::getLinkedTweet
     */
    public function testGetLinkedTweet()
    {
        $this->object->setTweet('https://testing-a-link-in-a-tweet.com');

        $this->assertTag(array('tag' => 'a', 'attributes' => array('href' => 'https://testing-a-link-in-a-tweet.com')), $this->object->getLinkedTweet());
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::loadArray
     */
    public function testLoadArray()
    {
        $this->object->loadArray($this->getTweet());

        $this->validateTweet();
    }

    /**
     * @covers Wysow\ArchiveMyTweetsBundle\Entity\Tweet::loadJsonObject
     */
    public function testLoadJsonObject()
    {
        $tweet = json_encode($this->getTweet());

        $this->object->loadJsonObject(json_decode($tweet));

        $this->validateTweet();
    }

    private function getTweet()
    {
        return $tweet = array(
            'created_at' => "Mon Jul 08 07:09:38 +0000 2013",
            'id' => "354135168220528640",
            'id_str' => "354135168220528640",
            'text' => "Je suis entré en contact avec Cédric MOREL - Directeur associé, AGENCE HULA-HOOP sur Viadeo : http://t.co/FJoYh0ATXX",
            'source' => '<a href="http://www.viadeo.com" rel="nofollow">Viadeo</a>',
            'truncated' => false,
            'in_reply_to_status_id' => NULL,
            'in_reply_to_status_id_str' => NULL,
            'in_reply_to_user_id' => NULL,
            'in_reply_to_user_id_str' => NULL,
            'in_reply_to_screen_name' => NULL,
            'user' => array(
                'id' => "85300487",
                'id_str' => "85300487",
                'name' => "Gaultier BONIFACE",
                'screen_name' => "Wysow",
                'location' => "Lyon",
                'description' => "",
                'url' => "http://t.co/6ZyEmy9HzP",
            ),
            'favorited' => false,
        );
    }

    private function validateTweet()
    {
        $date = new \DateTime('Mon Jul 08 07:09:38 +0000 2013');

        $this->assertEquals(354135168220528640, $this->object->getId());
        $this->assertEquals(85300487, $this->object->getUserId());
        $this->assertEquals('Wysow', $this->object->getUserScreenName());
        $this->assertEquals($date->getTimestamp(), $this->object->getCreatedAt()->getTimestamp());
        $this->assertEquals('Je suis entré en contact avec Cédric MOREL - Directeur associé, AGENCE HULA-HOOP sur Viadeo : http://t.co/FJoYh0ATXX', $this->object->getTweet());
        $this->assertEquals('<a href="http://www.viadeo.com" target="_blank" rel="nofollow">Viadeo</a>', $this->object->getSource());
        $this->assertFalse((bool)$this->object->getTruncated());
        $this->assertFalse((bool)$this->object->getFavorited());
        $this->assertNull($this->object->getInReplyToStatusId());
        $this->assertNull($this->object->getInReplyToUserId());
        $this->assertNull($this->object->getInReplyToScreenName());
    }
}
